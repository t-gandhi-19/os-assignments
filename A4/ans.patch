diff --git lin1/linux-5.14.6/arch/x86/entry/syscalls/syscall_64.tbl lin2/linux-5.14.6/arch/x86/entry/syscalls/syscall_64.tbl
index f6b5779..88d7d64 100644
--- lin1/linux-5.14.6/arch/x86/entry/syscalls/syscall_64.tbl
+++ lin2/linux-5.14.6/arch/x86/entry/syscalls/syscall_64.tbl
@@ -369,6 +369,9 @@
 445  common  landlock_add_rule sys_landlock_add_rule
 446  common  landlock_restrict_self  sys_landlock_restrict_self
 447  common  memfd_secret    sys_memfd_secret
+448  common  initialK    sys_initialK
+449  common  writerK     sys_writerK
+450  common  readerK     sys_readerK
 
 #
 # Due to a historical design error, certain syscalls are numbered differently
diff --git lin1/linux-5.14.6/kernel/sys.c lin2/linux-5.14.6/kernel/sys.c
index ef1a78f..896aac2 100644
--- lin1/linux-5.14.6/kernel/sys.c
+++ lin2/linux-5.14.6/kernel/sys.c
@@ -72,6 +72,10 @@
 #include <asm/io.h>
 #include <asm/unistd.h>
 
+#include <linux/slab.h>
+#include <linux/mutex.h>
+#include <linux/semaphore.h>
+
 #include "uid16.h"
 
 #ifndef SET_UNALIGN_CTL
@@ -154,6 +158,14 @@ int fs_overflowgid = DEFAULT_FS_OVERFLOWGID;
 EXPORT_SYMBOL(fs_overflowuid);
 EXPORT_SYMBOL(fs_overflowgid);
 
+long *bufK;
+int inK = 0;
+int outK = 0;
+
+static struct semaphore full;
+static struct semaphore empty;
+static DEFINE_MUTEX(mutex);
+
 /*
  * Returns true if current's euid is same as p's uid or euid,
  * or has CAP_SYS_NICE to p's user_ns.
@@ -200,6 +212,71 @@ out:
  return error;
 }
 
+SYSCALL_DEFINE1(initialK, int, n){
+ bufK = (long *)kmalloc(sizeof(long)*(n), GFP_KERNEL);
+ if(!bufK){
+   printk(KERN_ALERT "memory not allocated\n");
+   return -1;
+ }
+ mutex_init(&mutex);
+ sema_init(&empty,n);
+ sema_init(&full,0);
+ printk(KERN_INFO "made queue and initialised semaphores and mutex.\n");
+ return 0;
+}
+
+SYSCALL_DEFINE2(writerK, long, num, int, n){
+ int errorFlag=0;
+ errorFlag = down_interruptible(&empty);
+ if(errorFlag){
+   printk(KERN_ALERT "down empty unnseccessful for writer\n");
+   return -1;
+ }
+ errorFlag = mutex_lock_interruptible(&mutex);
+ if(errorFlag){
+   printk(KERN_ALERT "mutex lock unsuccessful for writer\n");
+   return -1;
+ }
+ printk(KERN_INFO "no. written: %ld\n",num);
+ bufK[inK] = num;
+ inK = (inK+1)%n;
+ mutex_unlock(&mutex);
+ printk(KERN_INFO "mutex unlock done for writer\n");
+ up(&full);
+ printk(KERN_INFO "up full done for writer\n");
+ return 0;
+}
+
+SYSCALL_DEFINE2(readerK, long *, to, int, n){
+ int errorFlag=0;
+ long t;
+ long* p;
+ errorFlag = down_interruptible(&full);
+ if(errorFlag){
+   printk(KERN_ALERT "down full unsuccessful for reader\n");
+   return -1;
+ }
+ errorFlag = mutex_lock_interruptible(&mutex);
+ if(errorFlag){
+   printk(KERN_ALERT "mutex lock unsuccessful for reader\n");
+   return -1;
+ }
+ t = bufK[outK];
+ outK = (outK+1)%n;
+ p = &t;
+ errorFlag = copy_to_user(to, p, sizeof(long));
+ if(errorFlag!=0){
+   printk(KERN_ALERT "copy to user unsuccessful. No of bytes not copied = %d\n", errorFlag);  
+   return -1;
+ }
+ mutex_unlock(&mutex);
+ printk(KERN_INFO "mutex unlock done for reader\n");
+ up(&empty);
+ printk(KERN_INFO "up empty done for reader\n");
+ return 0;
+}
+
+
 SYSCALL_DEFINE3(setpriority, int, which, int, who, int, niceval)
 {
  struct task_struct *g, *p;
 
